import asyncio
import os
import time
import shutil
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from telegram.constants import ChatAction
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException, WebDriverException
from dotenv import load_dotenv

# --- Configuraci√≥n inicial para Railway (Chromium) ---
# Instalar dependencias del sistema (solo en entornos Linux como Railway)
if os.name == 'posix':
    os.system("apt-get update")
    os.system("apt install -y chromium chromium-driver")

# Cargar variables de entorno
load_dotenv()

# --- Variables de entorno ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
BLACKBOARD_USER = os.getenv('BLACKBOARD_USER')
BLACKBOARD_PASS = os.getenv('BLACKBOARD_PASS')
BLACKBOARD_URL = os.getenv('BLACKBOARD_URL')

# --- Configuraci√≥n del bot de Telegram ---
application = Application.builder().token(TELEGRAM_TOKEN).build()
bot_active = False  # Control de estado

# --- Funciones auxiliares ---
async def send_telegram_message(message: str):
    """Env√≠a un mensaje de texto al chat de Telegram."""
    try:
        message = message.encode('ascii', 'ignore').decode('ascii')
        await application.bot.send_chat_action(chat_id=CHAT_ID, action=ChatAction.TYPING)
        await application.bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        print(f"Error enviando mensaje: {str(e)}")

async def send_photo_to_telegram(photo_path: str, caption: str = ""):
    """Env√≠a una foto al chat de Telegram y elimina el archivo despu√©s."""
    try:
        if not os.path.exists(photo_path):
            await send_telegram_message(f"‚ö†Ô∏è Archivo no encontrado: {photo_path}")
            return False
        
        await application.bot.send_chat_action(chat_id=CHAT_ID, action=ChatAction.UPLOAD_PHOTO)
        with open(photo_path, 'rb') as photo:
            await application.bot.send_photo(
                chat_id=CHAT_ID,
                photo=photo,
                caption=caption[:1024]  # L√≠mite de caracteres en Telegram
            )
        os.remove(photo_path)
        return True
    except Exception as e:
        print(f"üì∏ Error enviando foto: {str(e)}")
        return False

def setup_chrome_driver():
    """Configura el navegador Chrome/Chromium en modo headless."""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # Configuraci√≥n espec√≠fica para Railway
    chrome_options.binary_location = os.getenv("GOOGLE_CHROME_BIN", "/usr/bin/chromium")
    chromedriver_path = os.getenv("CHROMEDRIVER_PATH", "/usr/bin/chromedriver")
    
    return webdriver.Chrome(
        service=Service(chromedriver_path),
        options=chrome_options
    )

# --- L√≥gica principal ---
async def process_page(driver, url: str, page_name: str):
    """Procesa una p√°gina, toma capturas y las env√≠a a Telegram."""
    try:
        await send_telegram_message(f"üîÑ Procesando {page_name}...")
        driver.get(url)
        time.sleep(8)  # Espera a que cargue la p√°gina
        
        screenshot_path = f"{page_name}.png"
        driver.save_screenshot(screenshot_path)
        await send_photo_to_telegram(screenshot_path, f"üìå {page_name.upper()}")
        
    except WebDriverException as e:
        await send_telegram_message(f"üö® Error en {page_name}: {str(e)}")
    except Exception as e:
        await send_telegram_message(f"‚ùå Error inesperado: {str(e)}")

async def check_blackboard():
    """Funci√≥n principal que maneja el flujo de Blackboard."""
    global bot_active
    driver = None
    
    try:
        driver = setup_chrome_driver()
        await send_telegram_message("üîë Iniciando sesi√≥n en Blackboard...")
        
        # Login
        driver.get(BLACKBOARD_URL)
        time.sleep(5)
        driver.find_element(By.ID, "user_id").send_keys(BLACKBOARD_USER)
        driver.find_element(By.ID, "password").send_keys(BLACKBOARD_PASS)
        driver.find_element(By.ID, "entry-login").click()
        time.sleep(8)
        
        # P√°ginas a procesar
        pages = {
            "Actividad Reciente": "https://ucv.blackboard.com/ultra/stream",
            "Calendario": "https://ucv.blackboard.com/ultra/calendar",
            "Calificaciones": "https://ucv.blackboard.com/ultra/grades"
        }
        
        for name, url in pages.items():
            await process_page(driver, url, name)
            
        await send_telegram_message("‚úÖ Proceso completado!")
        
    except NoSuchElementException:
        await send_telegram_message("üîç No se encontr√≥ un elemento en la p√°gina. ¬øCambi√≥ la estructura de Blackboard?")
    except Exception as e:
        await send_telegram_message(f"üí• Error cr√≠tico: {str(e)}")
    finally:
        if driver:
            driver.quit()
        bot_active = False

# --- Comandos de Telegram ---
async def start(update: Update, context: CallbackContext):
    global bot_active
    if bot_active:
        await update.message.reply_text("‚è≥ El bot ya est√° en proceso. Espera a que termine.")
    else:
        bot_active = True
        await update.message.reply_text("üöÄ Iniciando bot...")
        await check_blackboard()

# --- Ejecuci√≥n ---
if __name__ == "__main__":
    # Registro de comandos
    application.add_handler(CommandHandler("start", start))
    
    # Mensaje de inicio (√∫til para logs)
    print("ü§ñ Bot iniciado. Esperando comandos...")
    
    # Iniciar el bot
    application.run_polling()
